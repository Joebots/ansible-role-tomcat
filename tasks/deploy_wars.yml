---
- name: determine the deploy location
  set_fact:
    destination: "{{ tomcat_directory }}/{{ item.name }}/{{ tomcat_archive[tomcat_names.version | default (tomcat_version)]['dir'] }}/webapps"
  with_items:
    - "{{ tomcat_names }}"

- name: set tomcat_wars fact
  set_fact:
    tomcat_wars: "{{item.wars}}"
  with_items:
    - "{{ tomcat_names }}"
  when:
    - "tomcat_names.wars is defined"

- name: set tomcat_wars_s3 fact
  set_fact:
    tomcat_wars_s3: "{{item.wars_s3}}"
  with_items:
    - "{{ tomcat_names }}"
  when:
    - "tomcat_names.wars_s3 is defined"

- name: "Ensure webapp dir exists"
  file:
    name: "{{ destination }}"
    recurse: true
    state: "directory"
  with_items:
    - "{{ tomcat_names }}"

- name: "loop over tomcat_wars in urls"
  get_url:
    dest: "{{ destination }}/"
    url: "{{ item.url }}"
    validate_certs: "{{ tomcat_validate_certs }}"
  with_items:
    - "{{ tomcat_wars }}"
  when:
    - "tomcat_wars is defined"

- name: "loop over tomcat_wars in s3"
  aws_s3:
    bucket: "{{ item.bucket }}"
    dest: "{{ destination }}/{{ item.object | basename }}"
    mode: get
    object: "{{ item.object }}"
    region: "{{ item.region | default(tomcat_s3_default_region) }}"
    validate_certs: "{{ tomcat_validate_certs }}"
  with_items:
    - "{{ tomcat_wars_s3 }}"
  when:
    - "tomcat_wars_s3 is defined"

- name: "Set war to / if only one exists"
  shell: |
    export WAR_FILES=$(ls {{destination}}/*.war | wc -l)
    if [[ $WAR_FILES == 1 ]]; then
      rm -rf "{{destination}}/ROOT"
      mv "{{destination}}/*.war" "{{destination}}/ROOT.war"
    fi
    unset WAR_FILES
  with_items:
    - "{{ tomcat_names }}"
  when:
    - "tomcat_one_war is true"